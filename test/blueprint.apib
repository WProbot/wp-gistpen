FORMAT: 1A
HOST: http://jamesdigioia.ngrok.com/wp-json/intraxia/v1/gistpen

# WP-Gistpen

The WP-Gistpen API is built into the WP-API for client-side Gistpen manipulation.

## Zip Collection [/zip]

### List Zip Resources [GET]

You can retrieve the most recent Zips or search Gistpen for Zips using a number of provided url parameters.

+ Paramters
    + s: `composer.json` - Term to search by
        + Default: ""
    + type: `both` (enum[string]) - Type to search by

        Should be either Zip, File, or both.

        + Members
            + `zip`
            + `file`
            + `both`

+ Response 200

        [
            {
                "description": "Zip description" // @todo define object
            }
        ]

### Create Zip Resource [POST]

You can create a new Zip resource.

+ Request (application/json)

                {
                    "description": ""
                }

+ Response 201 (application/json)

    + Headers

            Location: /todo/1

    + Body

                {
                    "description": ""
                }

## Zip Resource [/zip/{zip_id}]

+ Parameters
    + zip_id (number) - ID of the Zip

### Get individual Zip resource [GET]

You can get the information for an individual zip resource.

+ Response 200

            {
                "description": "Zip description"
            }

### Update Zip Resource [PUT]

You can update a currently existing Zip resource at the provided id.

+ Request (application/json)

            {
                "description": ""
            }

+ Response 200

            {
                "description": "Zip description"
            }

## User Collection [/me]

### List User Settings [GET]

You can retrieve the user's current settings with this endpoint. It returns an object with key:value pairs with all of the user's settings.

+ Response 200 (application/json)

        {
            "ace_theme": "ambiance"
        }

### Update User Settings [PATCH]

You can update a user's settings with this endpoint. It also returns an object with the user's settings, in addition to an error array for any keys that weren't updated.

+ Request (application/json)

        {
            "ace_theme": "chaos",
            "unknown_key": "random-value"
        }

+ Response 201 (application/json)

    + Header

            X-Invalid-Keys: random-value

    + Body

            {
                "ace_theme": "chaos"
            }

## Site Options Collection [/site]

### List Site Options [GET]

You can retrieve the site's current settings with this endpoint.

+ Response 200 (application/json)

            {
                "prism_theme": "default",
                "prism_plugins": [
                    "line-numbers",
                    "show-invisibles"
                ],
                "gist_token": "abcdefghijk0123456789"
            }

### Update Site Options [PATCH]

You can update any of the site's settings with this endpoint. Just send the data in the location in the structure that needs to be updataed. The endpoint will return the updated settings for the site.

+ Request (application/json)

        {
            "prism_theme": "xonokai",
            "random": "value"
        }

+ Response 201 (application/json)

    + Header

            X-Invalid-Keys: random

    + Body

            {
                "prism_theme": "xonokai",
                "prism_plugins": [
                    "line-numbers",
                    "show-invisibles"
                ],
                "gist_token": "abcdefghijk0123456789"
            }

## Jobs Collection [/jobs]

The Jobs Collection endpoints provides client access to the jobs system.

### List Jobs [GET]

Retrieve a list of all the registered jobs.

+ Response 200 (application/json)

        [
            {
                "name": "export",
                "url": "full-url/jobs/export"
            }
        ]

## Jobs Resource [/jobs/{job_name}]

The Jobs Resource endpoints provide a way for clients to start and retrieve data on past runs, as well as forming an integral part of the system itself.

+ Parameters
    + job_name (string) - Job name registered with the jobs system

### Get Job Status [GET]

Retrieves the last status as well as recent run history.

+ Response 200 (application/json)

        {
            "latest": {
                "status": "passed",
                "url": "/jobs/export/12345"
            },
            "history": [
                {
                    "status": "passed",
                    "url": "/jobs/export/12345"
                }
            ]
        }

### Start New Job [POST]

Kicks off a new background task for the registered job.

+ Response 202 (application/json)

        {
            "status": "created",
            "url": "/jobs_exports/12345"
        }

## Task Resource [/jobs/{job_name}/{task_timestamp}]

The Task resource provides status and console information for running background tasks.

+ Parameters
    + job_name (string) - Job name registered with the jobs system
    + task_timestamp (number) - Timestamp for the task was created

### Get Task Status [GET]

+ Response 200 (application/json)

        {
            "status": "running",
            "console": "/jobs/export/12345/console"
        }

## Task Console [/jobs/{jobs_name}/{task_timestamp}/console]

The Task console provides a stream of helpful information from the running task.

+ Paramters
    + o (number) - Console offset, starts at 0
        + Default: "0"

Use the provided "next" key to make subsequent calls to the console API.

+ Response 200 (application/json)

    {
        "messages": [
            {
                "text": "This is a message",
                "level": "debug",
                "timestamp": "2016-01-00T00:00:00+00:00Z"
            }
        ],
        "next": "/jobs/exports/12345/console?o=1"
    }
